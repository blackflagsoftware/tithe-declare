// Code generated by MockGen. DO NOT EDIT.
// Source: audit.go

// Package audit is a generated GoMock package.
package audit

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuditAdapter is a mock of AuditAdapter interface.
type MockAuditAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAuditAdapterMockRecorder
}

// MockAuditAdapterMockRecorder is the mock recorder for MockAuditAdapter.
type MockAuditAdapterMockRecorder struct {
	mock *MockAuditAdapter
}

// NewMockAuditAdapter creates a new mock instance.
func NewMockAuditAdapter(ctrl *gomock.Controller) *MockAuditAdapter {
	mock := &MockAuditAdapter{ctrl: ctrl}
	mock.recorder = &MockAuditAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditAdapter) EXPECT() *MockAuditAdapterMockRecorder {
	return m.recorder
}

// WriteAudit mocks base method.
func (m *MockAuditAdapter) WriteAudit(arg0 Audit) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteAudit", arg0)
}

// WriteAudit indicates an expected call of WriteAudit.
func (mr *MockAuditAdapterMockRecorder) WriteAudit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAudit", reflect.TypeOf((*MockAuditAdapter)(nil).WriteAudit), arg0)
}
