// Code generated by MockGen. DO NOT EDIT.
// Source: domain.go

// Package login is a generated GoMock package.
package login

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataLoginV1Adapter is a mock of DataLoginV1Adapter interface.
type MockDataLoginV1Adapter struct {
	ctrl     *gomock.Controller
	recorder *MockDataLoginV1AdapterMockRecorder
}

// MockDataLoginV1AdapterMockRecorder is the mock recorder for MockDataLoginV1Adapter.
type MockDataLoginV1AdapterMockRecorder struct {
	mock *MockDataLoginV1Adapter
}

// NewMockDataLoginV1Adapter creates a new mock instance.
func NewMockDataLoginV1Adapter(ctrl *gomock.Controller) *MockDataLoginV1Adapter {
	mock := &MockDataLoginV1Adapter{ctrl: ctrl}
	mock.recorder = &MockDataLoginV1AdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLoginV1Adapter) EXPECT() *MockDataLoginV1AdapterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataLoginV1Adapter) Create(arg0 context.Context, arg1 *Login, arg2 ResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataLoginV1AdapterMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDataLoginV1Adapter) Delete(arg0 context.Context, arg1 *Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataLoginV1AdapterMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).Delete), arg0, arg1)
}

// GetByEmailAddr mocks base method.
func (m *MockDataLoginV1Adapter) GetByEmailAddr(arg0 context.Context, arg1 *Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmailAddr", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByEmailAddr indicates an expected call of GetByEmailAddr.
func (mr *MockDataLoginV1AdapterMockRecorder) GetByEmailAddr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailAddr", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).GetByEmailAddr), arg0, arg1)
}

// GetLoginRoles mocks base method.
func (m *MockDataLoginV1Adapter) GetLoginRoles(arg0 context.Context, arg1 string, arg2 *[]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLoginRoles indicates an expected call of GetLoginRoles.
func (mr *MockDataLoginV1AdapterMockRecorder) GetLoginRoles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginRoles", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).GetLoginRoles), arg0, arg1, arg2)
}

// GetResetRequest mocks base method.
func (m *MockDataLoginV1Adapter) GetResetRequest(arg0 context.Context, arg1 *ResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResetRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResetRequest indicates an expected call of GetResetRequest.
func (mr *MockDataLoginV1AdapterMockRecorder) GetResetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResetRequest", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).GetResetRequest), arg0, arg1)
}

// ProcessResetRequest mocks base method.
func (m *MockDataLoginV1Adapter) ProcessResetRequest(arg0 context.Context, arg1 *ResetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessResetRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessResetRequest indicates an expected call of ProcessResetRequest.
func (mr *MockDataLoginV1AdapterMockRecorder) ProcessResetRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessResetRequest", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).ProcessResetRequest), arg0, arg1)
}

// Read mocks base method.
func (m *MockDataLoginV1Adapter) Read(arg0 context.Context, arg1 *Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockDataLoginV1AdapterMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).Read), arg0, arg1)
}

// ReadAll mocks base method.
func (m *MockDataLoginV1Adapter) ReadAll(arg0 context.Context, arg1 *[]Login, arg2 LoginParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDataLoginV1AdapterMockRecorder) ReadAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).ReadAll), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockDataLoginV1Adapter) Update(arg0 context.Context, arg1 Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataLoginV1AdapterMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).Update), arg0, arg1)
}

// UpdatePwd mocks base method.
func (m *MockDataLoginV1Adapter) UpdatePwd(arg0 context.Context, arg1 Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePwd", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePwd indicates an expected call of UpdatePwd.
func (mr *MockDataLoginV1AdapterMockRecorder) UpdatePwd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePwd", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).UpdatePwd), arg0, arg1)
}

// WithRoles mocks base method.
func (m *MockDataLoginV1Adapter) WithRoles(arg0 context.Context, arg1 *[]LoginRoles) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRoles", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithRoles indicates an expected call of WithRoles.
func (mr *MockDataLoginV1AdapterMockRecorder) WithRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRoles", reflect.TypeOf((*MockDataLoginV1Adapter)(nil).WithRoles), arg0, arg1)
}
