// Code generated by MockGen. DO NOT EDIT.
// Source: domain.go

// Package loginrole is a generated GoMock package.
package loginrole

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataLoginRoleV1Adapter is a mock of DataLoginRoleV1Adapter interface.
type MockDataLoginRoleV1Adapter struct {
	ctrl     *gomock.Controller
	recorder *MockDataLoginRoleV1AdapterMockRecorder
}

// MockDataLoginRoleV1AdapterMockRecorder is the mock recorder for MockDataLoginRoleV1Adapter.
type MockDataLoginRoleV1AdapterMockRecorder struct {
	mock *MockDataLoginRoleV1Adapter
}

// NewMockDataLoginRoleV1Adapter creates a new mock instance.
func NewMockDataLoginRoleV1Adapter(ctrl *gomock.Controller) *MockDataLoginRoleV1Adapter {
	mock := &MockDataLoginRoleV1Adapter{ctrl: ctrl}
	mock.recorder = &MockDataLoginRoleV1AdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataLoginRoleV1Adapter) EXPECT() *MockDataLoginRoleV1AdapterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataLoginRoleV1Adapter) Create(arg0 context.Context, arg1 *LoginRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataLoginRoleV1AdapterMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataLoginRoleV1Adapter)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDataLoginRoleV1Adapter) Delete(arg0 context.Context, arg1 *LoginRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDataLoginRoleV1AdapterMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataLoginRoleV1Adapter)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockDataLoginRoleV1Adapter) Read(arg0 context.Context, arg1 *LoginRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockDataLoginRoleV1AdapterMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDataLoginRoleV1Adapter)(nil).Read), arg0, arg1)
}

// ReadAll mocks base method.
func (m *MockDataLoginRoleV1Adapter) ReadAll(arg0 context.Context, arg1 *[]LoginRole, arg2 LoginRoleParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDataLoginRoleV1AdapterMockRecorder) ReadAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDataLoginRoleV1Adapter)(nil).ReadAll), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockDataLoginRoleV1Adapter) Update(arg0 context.Context, arg1 LoginRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataLoginRoleV1AdapterMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataLoginRoleV1Adapter)(nil).Update), arg0, arg1)
}
