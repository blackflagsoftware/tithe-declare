// Code generated by MockGen. DO NOT EDIT.
// Source: email.go

// Package email is a generated GoMock package.
package email

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailer is a mock of Emailer interface.
type MockEmailer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailerMockRecorder
}

// MockEmailerMockRecorder is the mock recorder for MockEmailer.
type MockEmailerMockRecorder struct {
	mock *MockEmailer
}

// NewMockEmailer creates a new mock instance.
func NewMockEmailer(ctrl *gomock.Controller) *MockEmailer {
	mock := &MockEmailer{ctrl: ctrl}
	mock.recorder = &MockEmailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailer) EXPECT() *MockEmailerMockRecorder {
	return m.recorder
}

// SendIndividualReminder mocks base method.
func (m *MockEmailer) SendIndividualReminder(arg0 context.Context, arg1 []string, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendIndividualReminder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendIndividualReminder indicates an expected call of SendIndividualReminder.
func (mr *MockEmailerMockRecorder) SendIndividualReminder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendIndividualReminder", reflect.TypeOf((*MockEmailer)(nil).SendIndividualReminder), arg0, arg1, arg2)
}

// SendReminder mocks base method.
func (m *MockEmailer) SendReminder(arg0 context.Context, arg1 []string, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReminder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReminder indicates an expected call of SendReminder.
func (mr *MockEmailerMockRecorder) SendReminder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReminder", reflect.TypeOf((*MockEmailer)(nil).SendReminder), arg0, arg1, arg2)
}

// SendReset mocks base method.
func (m *MockEmailer) SendReset(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReset", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReset indicates an expected call of SendReset.
func (mr *MockEmailerMockRecorder) SendReset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReset", reflect.TypeOf((*MockEmailer)(nil).SendReset), arg0, arg1, arg2)
}
